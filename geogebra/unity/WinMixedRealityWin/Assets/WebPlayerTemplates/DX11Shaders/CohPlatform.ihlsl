    /*
This file is part of Renoir, a modern graphics library.

Copyright (c) 2012-2016 Coherent Labs AD and/or its licensors. All
rights reserved in all media.

The coded instructions, statements, computer programs, and/or related
material (collectively the "Data") in these files contain confidential
and unpublished information proprietary Coherent Labs and/or its
licensors, which is protected by United States of America federal
copyright law and by international treaties.

This software or source code is supplied under the terms of a license
agreement and nondisclosure agreement with Coherent Labs AD and may
not be copied, disclosed, or exploited except in accordance with the
terms of that agreement. The Data may not be disclosed or distributed to
third parties, in whole or in part, without the prior written consent of
Coherent Labs AD.

COHERENT LABS MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS
SOURCE CODE FOR ANY PURPOSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER, ITS AFFILIATES,
PARENT COMPANIES, LICENSORS, SUPPLIERS, OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OR PERFORMANCE OF THIS SOFTWARE OR SOURCE CODE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#ifndef COH_PLATFORM_GUARD
#define COH_PLATFORM_GUARD

#ifdef __PSSL__
#define SV_POSITION S_POSITION
#define cbuffer ConstantBuffer
#define SV_Target S_TARGET_OUTPUT
#endif

#ifdef __UE4__
#ifdef __UE4_416_SUPPORT__
#include "Common.usf"
#define COH_IS_UE4_CROSSCOMPILING COMPILER_GLSL
#else
#include "UniformBuffers/CohBackwardsCompatibility.ush"
#define COH_IS_UE4_CROSSCOMPILING COMPILER_HLSLCC
#endif
#define VS_SEMANTIC_POSITION ATTRIBUTE0
#define VS_SEMANTIC_COLOR ATTRIBUTE1
#define VS_SEMANTIC_TEXCOORD1 ATTRIBUTE2
#if XBOXONE_PROFILE
#define COH_A8_SAMPLE_MASK .r
#else
#define COH_A8_SAMPLE_MASK A8_SAMPLE_MASK
#endif
#if COH_IS_UE4_CROSSCOMPILING
#define SV_Target SV_Target0
#undef PS_INPUT_ADDITIONAL_INTERP_MODIFIER
#endif
#elif defined(__DX9__)
#define VS_SEMANTIC_POSITION POSITION
#define VS_POSITION POSITION
#define VS_SEMANTIC_COLOR COLOR
#define VS_SEMANTIC_TEXCOORD1 TEXCOORD0
#define SV_Target COLOR
#define COH_A8_SAMPLE_MASK .a
#else
#define VS_SEMANTIC_POSITION POSITION
#define VS_SEMANTIC_COLOR TEXCOORD0
#define VS_SEMANTIC_TEXCOORD1 TEXCOORD1
#if defined(__XBOXONE__)
#define COH_A8_SAMPLE_MASK .r
#else
#define COH_A8_SAMPLE_MASK .a
#endif
#endif

#if defined(__PSSL__) || (defined(__UE4__) && (COH_IS_UE4_CROSSCOMPILING || defined(PSSL_VERSION)))
#define COHERENT_MUL_SEMANTIC
#define COHERENT_POSITION_SEMANTIC
#else
#define COHERENT_MUL_SEMANTIC : float4
#define COHERENT_POSITION_SEMANTIC : float4
#endif

float4 CoherentMul(float4 vec, float4x4 mat) COHERENT_MUL_SEMANTIC
{
#ifdef __UE4__
    return mul(mat, vec);
#else
    return mul(vec, mat);
#endif
}

float4 CoherentPosition(float3 pos) COHERENT_POSITION_SEMANTIC
{
#ifdef __DX9__
    return float4(pos.x - 0.5f, pos.y - 0.5f, pos.z, 1);
#else
    return float4(pos, 1);
#endif
}

#ifdef __DX9__
#define STENCIL_OUTPUT_TYPE float4
#define STENCIL_OUTPUT_SEMANTIC : COLOR0
#define STENCIL_OUTPUT_RETURN(R) return R;
#define REGISTER(R) : register(R)
#define REGISTER_BUFFER(R) : register(R)
#define SAMPLE2D(tex, uv) tex2D(tex, uv)
#define SAMPLE2D_LOD(tex, uv) tex2Dlod(tex, uv)
#else
#define STENCIL_OUTPUT_TYPE void
#define STENCIL_OUTPUT_SEMANTIC
#define STENCIL_OUTPUT_RETURN(R)
#define REGISTER(R)


#if defined(__UE4__) && COH_IS_UE4_CROSSCOMPILING
    #define REGISTER_BUFFER(R)

    #define CONCAT_IMPL(A, B) A ## B
    #define CONCAT(A, B) CONCAT_IMPL(A, B)
    #define SAMPLE2D(tex, uv) tex.Sample(CONCAT(tex, Sampler), uv)
    #define SAMPLE2D_LOD(tex, uv) tex.Sample(CONCAT(tex, Sampler), uv.xy)
#else
    #define REGISTER_BUFFER(R) : register(R)

    #define SAMPLE2D(tex, uv) tex.Sample(txBufferSampler, uv)
    #define SAMPLE2D_LOD(tex, uv) tex.Sample(txBufferSampler, uv.xy)
#endif

#endif

#if defined(__UE4__)
    #define BEGIN_DEFINE_CBUFFER(Name, Args)
    #define END_DEFINE_CBUFFER
#else
    #define BEGIN_DEFINE_CBUFFER(Name, Args) cbuffer Name Args {
    #define END_DEFINE_CBUFFER }
#endif

#endif // COHERENT_PLATFORM_GUARD
