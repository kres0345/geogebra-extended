project.description = 'GeoGebra'

apply from: 'gradle-scripts/repositories.gradle'
apply from: 'gradle-scripts/versions.gradle'

subprojects {
	apply plugin: 'eclipse'
	apply plugin: 'java'
	apply plugin: 'idea'

	eclipse.project {
		natures 'org.springsource.ide.eclipse.gradle.core.nature'
	}

	// add auto formatter to every project
	task eclipseJdtPrepare(type: Copy) {
		description 'Copies Eclipse jdt.core preference file.'
		from rootProject.file('eclipse/org.eclipse.jdt.core.prefs')
		into project.file('.settings/')
		outputs.upToDateWhen { false }
	}

	task eclipseJdtUi(type: Copy) {
		description 'Copies Eclipse jdt.ui preference file.'
		from rootProject.file('eclipse/org.eclipse.jdt.ui.prefs')
		into project.file('.settings/')
		outputs.upToDateWhen { false }
	}

	task cleanEclipseJdtUi(type: Delete) {
		description 'Cleans Eclipse jdt.ui preference file.'
		delete project.file('.settings/org.eclipse.jdt.ui.prefs')
	}

	tasks['eclipseJdt'].dependsOn(eclipseJdtPrepare)
	tasks['cleanEclipse'].dependsOn(cleanEclipseJdtUi)
	tasks['eclipse'].dependsOn(eclipseJdtPrepare, eclipseJdtUi, cleanEclipse)
}

wrapper {
	gradleVersion = gradleVersionGGB
}

task checkPmd(dependsOn: [':common:pmdMain', ':common-jre:pmdMain', ':web:pmdMain', 
	':editor-base:pmdMain', ':editor-web:pmdMain',
	':keyboard-web:pmdMain', ':keyboard-base:pmdMain']){
	description "run PMD for all subprojects with pmd conf"
}

task checkAllStyles(dependsOn: [':common:checkstyleMain', ':common-jre:checkstyleMain', ':web:checkstyleMain',
        ':editor-base:checkstyleMain', ':editor-web:checkstyleMain',
        ':keyboard-web:checkstyleMain', ':keyboard-base:checkstyleMain', ':desktop:checkstyleTest']){
        description "run checkstyle for all subprojects with checkstyle conf"
}

// eclipse related tasks
project(':editor-base') {
	
	cleanEclipse.dependsOn('cleanJavacc')
	eclipseClasspath.dependsOn('compileJavacc')

	eclipse.project {
		natures 'sf.eclipse.javacc.javaccnature'
	}
}

project(':common') {
	
	cleanEclipse.dependsOn('cleanJavacc')
	eclipseClasspath.dependsOn('compileJavacc')

	eclipse.project {
 		natures 'sf.eclipse.javacc.javaccnature'
	}
}

project(':web') {
	// exclude from the eclipse classpath the java files in the resources dir
	eclipse.classpath.file { 
		whenMerged { classpath ->
			classpath.entries.find { entry -> entry.kind == 'src' && entry.path == 'src/main/resources' }.excludes = ['**/*.java']
		}
	}
}

ext.joglVersion = '2.2.0'

// https://gist.github.com/mashimom/891a55878eda510d316e
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
	  options.addStringOption('tag', 'example:X')
    }
  }
}
