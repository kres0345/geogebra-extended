/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package org.geogebra.common.kernel.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ASSIGNMENT = 5;
  /** RegularExpression Id. */
  int DELAYED_ASSIGNMENT = 6;
  /** RegularExpression Id. */
  int VERTICAL_BAR = 7;
  /** RegularExpression Id. */
  int NOT = 8;
  /** RegularExpression Id. */
  int OR = 9;
  /** RegularExpression Id. */
  int AND = 10;
  /** RegularExpression Id. */
  int IMPLICATION = 11;
  /** RegularExpression Id. */
  int XOR = 12;
  /** RegularExpression Id. */
  int SEQUENCE_OPERATOR = 13;
  /** RegularExpression Id. */
  int EQUAL_BOOLEAN = 14;
  /** RegularExpression Id. */
  int NOT_EQUAL = 15;
  /** RegularExpression Id. */
  int IS_ELEMENT_OF = 16;
  /** RegularExpression Id. */
  int IS_SUBSET_OF = 17;
  /** RegularExpression Id. */
  int IS_SUBSET_OF_STRICT = 18;
  /** RegularExpression Id. */
  int SET_DIFFERENCE = 19;
  /** RegularExpression Id. */
  int LESS = 20;
  /** RegularExpression Id. */
  int GREATER = 21;
  /** RegularExpression Id. */
  int LESS_EQUAL = 22;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 23;
  /** RegularExpression Id. */
  int PARALLEL = 24;
  /** RegularExpression Id. */
  int PERPENDICULAR = 25;
  /** RegularExpression Id. */
  int EQUAL = 26;
  /** RegularExpression Id. */
  int PLUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int PLUSMINUS = 29;
  /** RegularExpression Id. */
  int SUPERSCRIPT_MINUS = 30;
  /** RegularExpression Id. */
  int POWER = 31;
  /** RegularExpression Id. */
  int MULTIPLY = 32;
  /** RegularExpression Id. */
  int VECTORPRODUCT = 33;
  /** RegularExpression Id. */
  int DIVIDE = 34;
  /** RegularExpression Id. */
  int FACTORIAL = 35;
  /** RegularExpression Id. */
  int UNDEFINED = 36;
  /** RegularExpression Id. */
  int POWERN = 37;
  /** RegularExpression Id. */
  int INDEXDIGIT = 38;
  /** RegularExpression Id. */
  int PI = 39;
  /** RegularExpression Id. */
  int EULER_GAMMA = 40;
  /** RegularExpression Id. */
  int E = 41;
  /** RegularExpression Id. */
  int IMAGINARY = 42;
  /** RegularExpression Id. */
  int DEGREE_SYMBOL = 43;
  /** RegularExpression Id. */
  int DEGREE_WORD = 44;
  /** RegularExpression Id. */
  int GRADIAN = 45;
  /** RegularExpression Id. */
  int ANGLE_MINUTES = 46;
  /** RegularExpression Id. */
  int ANGLE_SECONDS = 47;
  /** RegularExpression Id. */
  int INFINITY = 48;
  /** RegularExpression Id. */
  int RAD = 49;
  /** RegularExpression Id. */
  int DERIVATIVE = 50;
  /** RegularExpression Id. */
  int TRUE = 51;
  /** RegularExpression Id. */
  int FALSE = 52;
  /** RegularExpression Id. */
  int DECIMAL_POINT = 53;
  /** RegularExpression Id. */
  int COMMA = 54;
  /** RegularExpression Id. */
  int VARX = 55;
  /** RegularExpression Id. */
  int VARY = 56;
  /** RegularExpression Id. */
  int VARZ = 57;
  /** RegularExpression Id. */
  int FLOAT = 58;
  /** RegularExpression Id. */
  int EFLOAT = 59;
  /** RegularExpression Id. */
  int INTEGER = 60;
  /** RegularExpression Id. */
  int DIGIT = 61;
  /** RegularExpression Id. */
  int SPREADSHEET_LABEL = 62;
  /** RegularExpression Id. */
  int LABEL = 63;
  /** RegularExpression Id. */
  int INDEX = 64;
  /** RegularExpression Id. */
  int LETTER = 65;
  /** RegularExpression Id. */
  int X_FUNC = 66;
  /** RegularExpression Id. */
  int Y_FUNC = 67;
  /** RegularExpression Id. */
  int Z_FUNC = 68;
  /** RegularExpression Id. */
  int RANDOM_FUNC = 69;
  /** RegularExpression Id. */
  int POLAR_SEPARATOR = 70;
  /** RegularExpression Id. */
  int SQRT_SHORT = 71;
  /** RegularExpression Id. */
  int FUNCTION_LABEL = 72;
  /** RegularExpression Id. */
  int FUNCTION_POWER_LABEL = 73;
  /** RegularExpression Id. */
  int TEXT = 74;
  /** RegularExpression Id. */
  int CHAR = 75;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<ASSIGNMENT>",
    "\"::=\"",
    "\"|\"",
    "\"\\u00ac\"",
    "<OR>",
    "<AND>",
    "<IMPLICATION>",
    "<XOR>",
    "\"\\u2026\"",
    "<EQUAL_BOOLEAN>",
    "<NOT_EQUAL>",
    "\"\\u2208\"",
    "\"\\u2286\"",
    "\"\\u2282\"",
    "\"\\\\\"",
    "\"<\"",
    "\">\"",
    "<LESS_EQUAL>",
    "<GREATER_EQUAL>",
    "\"\\u2225\"",
    "<PERPENDICULAR>",
    "<EQUAL>",
    "\"+\"",
    "<MINUS>",
    "\"\\u00b1\"",
    "\"\\u207b\"",
    "<POWER>",
    "<MULTIPLY>",
    "\"\\u2297\"",
    "<DIVIDE>",
    "\"!\"",
    "<UNDEFINED>",
    "<POWERN>",
    "<INDEXDIGIT>",
    "<PI>",
    "<EULER_GAMMA>",
    "\"\\u212f\"",
    "\"\\u03af\"",
    "<DEGREE_SYMBOL>",
    "\"deg\"",
    "\"\\u1d4d\"",
    "\"\\u2032\"",
    "<ANGLE_SECONDS>",
    "<INFINITY>",
    "\"rad\"",
    "\"\\\'\"",
    "<TRUE>",
    "<FALSE>",
    "<DECIMAL_POINT>",
    "<COMMA>",
    "\"x\"",
    "\"y\"",
    "\"z\"",
    "<FLOAT>",
    "<EFLOAT>",
    "<INTEGER>",
    "<DIGIT>",
    "<SPREADSHEET_LABEL>",
    "<LABEL>",
    "<INDEX>",
    "<LETTER>",
    "<X_FUNC>",
    "<Y_FUNC>",
    "<Z_FUNC>",
    "\"random()\"",
    "<POLAR_SEPARATOR>",
    "\"\\u221a\"",
    "<FUNCTION_LABEL>",
    "<FUNCTION_POWER_LABEL>",
    "<TEXT>",
    "<CHAR>",
    "\":\"",
    "\")\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"%\"",
    "\"(\"",
  };

}
