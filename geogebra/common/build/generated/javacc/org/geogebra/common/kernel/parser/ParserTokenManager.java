/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package org.geogebra.common.kernel.parser;
import org.geogebra.common.kernel.Construction;
import org.geogebra.common.kernel.arithmetic.*;
import org.geogebra.common.kernel.arithmetic3D.MyVec3DNode;
import org.geogebra.common.kernel.geos.GeoSymbolicI;
import org.geogebra.common.kernel.geos.GeoElement;
import org.geogebra.common.kernel.geos.GeoElementSpreadsheet;
import org.geogebra.common.kernel.geos.GeoNumeric;
import org.geogebra.common.kernel.parser.ParserInterface;
import org.geogebra.common.kernel.StringTemplate;
import org.geogebra.common.main.MyError;
import org.geogebra.common.main.Localization;
import org.geogebra.common.main.BracketsError;
import org.geogebra.common.util.StringUtil;
import com.himamis.retex.editor.share.util.Unicode;
import org.geogebra.common.kernel.Kernel;
import org.geogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac;
import org.geogebra.common.main.App;
import org.geogebra.common.plugin.Operation;
import java.util.ArrayList;
import java.util.Vector;

/** Token Manager. */
@SuppressWarnings("unused")public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000000000L) != 0L)
            return 64;
         if ((active0 & 0x80L) != 0L)
            return 3;
         if ((active0 & 0x240000000000L) != 0L)
            return 185;
         if ((active0 & 0x2100000000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 63;
            return 186;
         }
         if ((active0 & 0x200000L) != 0L)
            return 20;
         if ((active0 & 0x40000000L) != 0L)
            return 47;
         if ((active0 & 0x40L) != 0L || (active1 & 0x1000L) != 0L)
            return 0;
         if ((active0 & 0x800000000L) != 0L)
            return 16;
         if ((active0 & 0x4000000000000L) != 0L)
            return 70;
         if ((active0 & 0x400000000000L) != 0L)
            return 68;
         if ((active1 & 0x20000L) != 0L)
            return 25;
         if ((active0 & 0x80000000000000L) != 0L)
            return 104;
         if ((active0 & 0x200000000000000L) != 0L)
            return 120;
         if ((active0 & 0x100000L) != 0L)
            return 136;
         if ((active0 & 0x100000000000000L) != 0L)
            return 112;
         return -1;
      case 1:
         if ((active0 & 0x2100000000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
            return 187;
         }
         return -1;
      case 2:
         if ((active0 & 0x2100000000000L) != 0L)
            return 187;
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
            return 187;
         }
         return -1;
      case 3:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
            return 187;
         }
         return -1;
      case 4:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
            return 187;
         }
         return -1;
      case 5:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
            return 187;
         }
         return -1;
      case 6:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 6;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 35, 16);
      case 37:
         return jjStartNfaWithStates_0(0, 81, 25);
      case 39:
         return jjStartNfaWithStates_0(0, 50, 70);
      case 40:
         return jjStopAtPos(0, 82);
      case 41:
         return jjStopAtPos(0, 77);
      case 43:
         return jjStopAtPos(0, 27);
      case 58:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 60:
         return jjStartNfaWithStates_0(0, 20, 136);
      case 62:
         return jjStartNfaWithStates_0(0, 21, 20);
      case 92:
         return jjStopAtPos(0, 19);
      case 93:
         return jjStopAtPos(0, 78);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x20L);
      case 120:
         return jjStartNfaWithStates_0(0, 55, 104);
      case 121:
         return jjStartNfaWithStates_0(0, 56, 112);
      case 122:
         return jjStartNfaWithStates_0(0, 57, 120);
      case 123:
         return jjStopAtPos(0, 79);
      case 124:
         return jjStartNfaWithStates_0(0, 7, 3);
      case 125:
         return jjStopAtPos(0, 80);
      case 172:
         return jjStopAtPos(0, 8);
      case 177:
         return jjStopAtPos(0, 29);
      case 943:
         return jjStartNfaWithStates_0(0, 42, 185);
      case 7501:
         return jjStartNfaWithStates_0(0, 45, 185);
      case 8230:
         return jjStopAtPos(0, 13);
      case 8242:
         return jjStartNfaWithStates_0(0, 46, 68);
      case 8315:
         return jjStartNfaWithStates_0(0, 30, 47);
      case 8495:
         return jjStartNfaWithStates_0(0, 41, 64);
      case 8712:
         return jjStopAtPos(0, 16);
      case 8730:
         return jjStopAtPos(0, 71);
      case 8741:
         return jjStopAtPos(0, 24);
      case 8834:
         return jjStopAtPos(0, 18);
      case 8838:
         return jjStopAtPos(0, 17);
      case 8855:
         return jjStopAtPos(0, 33);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 187);
         break;
      case 103:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 187);
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa5_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa6_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa7_0(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(7, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x100000L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x10000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec2 = {
   0x8000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x40000L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x800000000200000L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x80000000L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x100000000L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x1000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x2000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x0L, 0x0L, 0x2000000000L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x0L, 0x4L
};
static final long[] jjbitVec11 = {
   0x80000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x40000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x0L, 0x40L
};
static final long[] jjbitVec14 = {
   0x0L, 0x0L, 0x0L, 0x800000L
};
static final long[] jjbitVec15 = {
   0x2000000L, 0x0L, 0x0L, 0x20L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0x0L, 0x80000000000000L
};
static final long[] jjbitVec17 = {
   0x0L, 0x0L, 0x0L, 0x2000000000000000L
};
static final long[] jjbitVec18 = {
   0x0L, 0x800000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec19 = {
   0x0L, 0x0L, 0x20c000000000000L, 0x0L
};
static final long[] jjbitVec20 = {
   0x0L, 0x3f1000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec21 = {
   0x0L, 0x0L, 0x0L, 0x1L
};
static final long[] jjbitVec22 = {
   0x0L, 0x0L, 0x8000000000000L, 0x0L
};
static final long[] jjbitVec23 = {
   0x800000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec24 = {
   0x0L, 0x0L, 0x401000000000000L, 0x0L
};
static final long[] jjbitVec25 = {
   0x0L, 0x0L, 0x0L, 0x4000000L
};
static final long[] jjbitVec26 = {
   0x8000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec27 = {
   0x4000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec28 = {
   0x40000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec29 = {
   0x1000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x200000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec31 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec33 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec34 = {
   0x0L, 0x80000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec35 = {
   0x1e00L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec37 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec38 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec40 = {
   0x3ff00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec41 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
static final long[] jjbitVec42 = {
   0x0L, 0x0L, 0x0L, 0x3ff00000000L
};
static final long[] jjbitVec43 = {
   0x3ff0000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec44 = {
   0x0L, 0x3ff0000L, 0x3ff000000000000L, 0x0L
};
static final long[] jjbitVec45 = {
   0x0L, 0x3ff03ffL, 0x0L, 0x0L
};
static final long[] jjbitVec46 = {
   0x0L, 0x0L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec47 = {
   0x600007fffffc0L, 0xffffffffffffc000L, 0xffffffffffffffffL, 0x13000000007fffffL
};
static final long[] jjbitVec48 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec49 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffff0L
};
static final long[] jjbitVec50 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec51 = {
   0x0L, 0x0L, 0xfffffffffffe0000L, 0xfffffffffffffL
};
static final long[] jjbitVec52 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffff0003L, 0x3ffffffffffffffL
};
static final long[] jjbitVec53 = {
   0xfffe000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec54 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec55 = {
   0x0L, 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec56 = {
   0xffffffffffffffffL, 0xffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec57 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0xffffffffe0000000L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec59 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec60 = {
   0xfffffffffff80000L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec61 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec63 = {
   0x0L, 0xffffffc000000000L, 0xfffffffe3fffffffL, 0x1fffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 185;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 186:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  else if (curChar == 36)
                     { jjCheckNAdd(158); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(154, 155); }
                  else if (curChar == 36)
                     { jjCheckNAdd(154); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(151); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(151); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(15, 20); }
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(21, 29); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddStates(30, 34); }
                  }
                  else if (curChar == 60)
                     { jjAddStates(35, 36); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(124, 125); }
                  else if (curChar == 59)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if (curChar == 44)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if (curChar == 47)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 61)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 0;
                  else if (curChar == 63)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  if (curChar == 36)
                     { jjAddStates(37, 39); }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 112:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 40)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  else if (curChar == 36)
                     { jjCheckNAdd(158); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(154, 155); }
                  else if (curChar == 36)
                     { jjCheckNAdd(154); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(151); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(151); }
                  break;
               case 185:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 120:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 40)
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  else if (curChar == 36)
                     { jjCheckNAdd(158); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(154, 155); }
                  else if (curChar == 36)
                     { jjCheckNAdd(154); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(151); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(151); }
                  break;
               case 187:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(172, 155); }
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(166); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  else if (curChar == 36)
                     { jjCheckNAdd(158); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(154, 155); }
                  else if (curChar == 36)
                     { jjCheckNAdd(154); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(151); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(151); }
                  break;
               case 136:
                  if (curChar == 61)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  break;
               case 104:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 40)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  else if (curChar == 36)
                     { jjCheckNAdd(158); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(154, 155); }
                  else if (curChar == 36)
                     { jjCheckNAdd(154); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(151); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(151); }
                  break;
               case 0:
                  if (curChar == 61 && kind > 5)
                     kind = 5;
                  break;
               case 6:
                  if (curChar == 38 && kind > 10)
                     kind = 10;
                  break;
               case 7:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 62 && kind > 11)
                     kind = 11;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 61 && kind > 14)
                     kind = 14;
                  break;
               case 14:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar == 61 && kind > 15)
                     kind = 15;
                  break;
               case 17:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if (curChar == 61 && kind > 23)
                     kind = 23;
                  break;
               case 21:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
               case 25:
                  if (curChar == 61 && kind > 26)
                     kind = 26;
                  break;
               case 26:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 45 && kind > 28)
                     kind = 28;
                  break;
               case 29:
                  if (curChar == 42 && kind > 31)
                     kind = 31;
                  break;
               case 30:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 42 && kind > 32)
                     kind = 32;
                  break;
               case 32:
                  if (curChar == 47 && kind > 34)
                     kind = 34;
                  break;
               case 33:
                  if (curChar == 63 && kind > 36)
                     kind = 36;
                  break;
               case 70:
                  if (curChar == 39 && kind > 47)
                     kind = 47;
                  break;
               case 71:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 97:
                  if (curChar == 44 && kind > 54)
                     kind = 54;
                  break;
               case 99:
                  if (curChar == 40 && kind > 66)
                     kind = 66;
                  break;
               case 107:
                  if (curChar == 40 && kind > 67)
                     kind = 67;
                  break;
               case 115:
                  if (curChar == 40 && kind > 68)
                     kind = 68;
                  break;
               case 122:
                  if (curChar == 59 && kind > 70)
                     kind = 70;
                  break;
               case 123:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(124, 125); }
                  break;
               case 124:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(124, 125); }
                  break;
               case 125:
                  if (curChar == 34 && kind > 74)
                     kind = 74;
                  break;
               case 135:
                  if (curChar == 60)
                     { jjAddStates(35, 36); }
                  break;
               case 137:
                  if (curChar == 61 && kind > 22)
                     kind = 22;
                  break;
               case 138:
                  if (curChar != 46)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAddStates(30, 34); }
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 140:
                  if (curChar != 46)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 142:
                  if (curChar == 46)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 144:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(145); }
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(145); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(15, 20); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(147); }
                  break;
               case 148:
                  if (curChar == 36)
                     { jjAddStates(37, 39); }
                  break;
               case 150:
                  if (curChar == 36)
                     { jjCheckNAdd(151); }
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(151); }
                  break;
               case 153:
                  if (curChar == 36)
                     { jjCheckNAdd(154); }
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(154, 155); }
                  break;
               case 155:
                  if (curChar == 40 && kind > 72)
                     kind = 72;
                  break;
               case 157:
                  if (curChar == 36)
                     { jjCheckNAdd(158); }
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 161:
                  if (curChar == 40 && kind > 73)
                     kind = 73;
                  break;
               case 163:
                  if (curChar != 36)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(21, 29); }
                  break;
               case 165:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(166); }
                  break;
               case 166:
                  if ((0x3ff009000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(166); }
                  break;
               case 168:
                  { jjAddStates(46, 47); }
                  break;
               case 171:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(172, 155); }
                  break;
               case 172:
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(172, 155); }
                  break;
               case 174:
                  { jjAddStates(48, 49); }
                  break;
               case 177:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 178:
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 180:
                  { jjAddStates(50, 51); }
                  break;
               case 182:
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 183:
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 184:
                  if ((0x3ff009000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 186:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(52, 53); }
                  else if (curChar == 91)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(54, 55); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(56, 57); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(58, 60); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(61, 63); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(64, 66); }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(21, 29); }
                  }
                  else if (curChar == 94)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(67, 75); }
                  if (curChar == 105)
                     { jjAddStates(76, 77); }
                  else if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 120;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 112;
                  else if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 104;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 95;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 91;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 86;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 83;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 61;
                  else if (curChar == 80)
                     { jjCheckNAdd(48); }
                  else if (curChar == 112)
                     { jjCheckNAdd(48); }
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if (curChar == 122)
                     { jjCheckNAdd(115); }
                  else if (curChar == 121)
                     { jjCheckNAdd(107); }
                  else if (curChar == 120)
                     { jjCheckNAdd(99); }
                  break;
               case 112:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(52, 53); }
                  else if (curChar == 91)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(54, 55); }
                  else if (curChar == 91)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(56, 57); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(58, 60); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(61, 63); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(64, 66); }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 185:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(52, 53); }
                  else if (curChar == 91)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(54, 55); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(56, 57); }
                  break;
               case 120:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(52, 53); }
                  else if (curChar == 91)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(54, 55); }
                  else if (curChar == 91)
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(56, 57); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(58, 60); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(61, 63); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(64, 66); }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 187:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(52, 53); }
                  else if (curChar == 91)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(54, 55); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(56, 57); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(58, 60); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(172, 155); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(61, 63); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(166); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(64, 66); }
                  break;
               case 104:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(52, 53); }
                  else if (curChar == 91)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(54, 55); }
                  else if (curChar == 91)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(56, 57); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(58, 60); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(61, 63); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(64, 66); }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 3:
                  if (curChar == 124 && kind > 9)
                     kind = 9;
                  break;
               case 4:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 28:
                  if (curChar == 94 && kind > 31)
                     kind = 31;
                  break;
               case 34:
                  if (curChar == 100 && kind > 36)
                     kind = 36;
                  break;
               case 35:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 78 && kind > 36)
                     kind = 36;
                  break;
               case 44:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 48:
                  if (curChar == 105 && kind > 39)
                     kind = 39;
                  break;
               case 49:
                  if (curChar == 112)
                     { jjCheckNAdd(48); }
                  break;
               case 50:
                  if (curChar == 80)
                     { jjCheckNAdd(48); }
                  break;
               case 52:
                  if (curChar == 97 && kind > 40)
                     kind = 40;
                  break;
               case 53:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 73:
                  if (curChar == 121 && kind > 48)
                     kind = 48;
                  break;
               case 74:
               case 129:
                  if (curChar == 116)
                     { jjCheckNAdd(73); }
                  break;
               case 75:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 101 && kind > 51)
                     kind = 51;
                  break;
               case 82:
               case 85:
                  if (curChar == 117)
                     { jjCheckNAdd(81); }
                  break;
               case 83:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 86:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 101 && kind > 52)
                     kind = 52;
                  break;
               case 89:
               case 93:
                  if (curChar == 115)
                     { jjCheckNAdd(88); }
                  break;
               case 90:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 94:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 98:
                  if (curChar == 120)
                     { jjCheckNAdd(99); }
                  break;
               case 99:
                  if (curChar == 91 && kind > 66)
                     kind = 66;
                  break;
               case 100:
                  if (curChar == 100)
                     { jjCheckNAdd(99); }
                  break;
               case 101:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 105:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 121)
                     { jjCheckNAdd(107); }
                  break;
               case 107:
                  if (curChar == 91 && kind > 67)
                     kind = 67;
                  break;
               case 108:
                  if (curChar == 100)
                     { jjCheckNAdd(107); }
                  break;
               case 109:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 113:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 122)
                     { jjCheckNAdd(115); }
                  break;
               case 115:
                  if (curChar == 91 && kind > 68)
                     kind = 68;
                  break;
               case 116:
                  if (curChar == 100)
                     { jjCheckNAdd(115); }
                  break;
               case 117:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 121:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 124:
                  { jjAddStates(78, 79); }
                  break;
               case 126:
                  if (curChar == 105)
                     { jjAddStates(76, 77); }
                  break;
               case 127:
                  if (curChar == 102 && kind > 48)
                     kind = 48;
                  break;
               case 128:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 130:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 143:
                  if (curChar == 69)
                     { jjAddStates(80, 81); }
                  break;
               case 149:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(64, 66); }
                  break;
               case 152:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(61, 63); }
                  break;
               case 155:
                  if (curChar == 91 && kind > 72)
                     kind = 72;
                  break;
               case 156:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(58, 60); }
                  break;
               case 161:
                  if (curChar == 91 && kind > 73)
                     kind = 73;
                  break;
               case 162:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(67, 75); }
                  break;
               case 163:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(21, 29); }
                  break;
               case 164:
                  if (curChar == 95)
                     { jjAddStates(56, 57); }
                  break;
               case 165:
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(166); }
                  break;
               case 166:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(166); }
                  break;
               case 167:
                  if (curChar == 123)
                     { jjCheckNAdd(168); }
                  break;
               case 168:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(168, 169); }
                  break;
               case 169:
                  if (curChar != 125)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(166); }
                  break;
               case 170:
                  if (curChar == 95)
                     { jjAddStates(54, 55); }
                  break;
               case 171:
                  { jjCheckNAddTwoStates(172, 155); }
                  break;
               case 172:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(172, 155); }
                  break;
               case 173:
                  if (curChar == 123)
                     { jjCheckNAdd(174); }
                  break;
               case 174:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(174, 175); }
                  break;
               case 175:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(172, 155); }
                  break;
               case 176:
                  if (curChar == 95)
                     { jjAddStates(52, 53); }
                  break;
               case 177:
                  { jjCheckNAddStates(40, 42); }
                  break;
               case 178:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 179:
                  if (curChar == 123)
                     { jjCheckNAdd(180); }
                  break;
               case 180:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(180, 181); }
                  break;
               case 181:
                  if (curChar == 125)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 182:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 183:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 184:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 186:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(160); }
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(160, 161); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(47); }
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(47); }
                  }
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 64;
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 68;
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if (jjCanMove_27(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddStates(30, 34); }
                  }
                  if (jjCanMove_28(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(15, 20); }
                  }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(21, 29); }
                  }
                  break;
               case 112:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(160); }
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(160, 161); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 185:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(160); }
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(160, 161); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 120:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(160); }
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(160, 161); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 187:
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(166); }
                  }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(172, 155); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(40, 42); }
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(160); }
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(160, 161); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 104:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(160); }
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(160, 161); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 9)
                     kind = 9;
                  break;
               case 8:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               case 11:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 11)
                     kind = 11;
                  break;
               case 12:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               case 15:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 14)
                     kind = 14;
                  break;
               case 18:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 15)
                     kind = 15;
                  break;
               case 19:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               case 22:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 23)
                     kind = 23;
                  break;
               case 23:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 25)
                     kind = 25;
                  break;
               case 27:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 28)
                     kind = 28;
                  break;
               case 28:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 31)
                     kind = 31;
                  break;
               case 31:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 32)
                     kind = 32;
                  break;
               case 32:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2) && kind > 34)
                     kind = 34;
                  break;
               case 33:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2) && kind > 36)
                     kind = 36;
                  break;
               case 46:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(47); }
                  break;
               case 47:
                  if (!jjCanMove_16(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAdd(47); }
                  break;
               case 51:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2) && kind > 39)
                     kind = 39;
                  break;
               case 63:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2) && kind > 40)
                     kind = 40;
                  break;
               case 65:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2) && kind > 43)
                     kind = 43;
                  break;
               case 67:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2) && kind > 47)
                     kind = 47;
                  break;
               case 68:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2) && kind > 47)
                     kind = 47;
                  break;
               case 69:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 72:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2) && kind > 48)
                     kind = 48;
                  break;
               case 97:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2) && kind > 54)
                     kind = 54;
                  break;
               case 122:
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2) && kind > 70)
                     kind = 70;
                  break;
               case 124:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     { jjAddStates(78, 79); }
                  break;
               case 138:
                  if (!jjCanMove_27(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAddStates(30, 34); }
                  break;
               case 139:
                  if (!jjCanMove_28(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 140:
                  if (!jjCanMove_27(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 141:
                  if (jjCanMove_28(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 142:
                  if (jjCanMove_27(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 144:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(145); }
                  break;
               case 145:
                  if (!jjCanMove_28(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(145); }
                  break;
               case 146:
                  if (!jjCanMove_28(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(15, 20); }
                  break;
               case 147:
                  if (!jjCanMove_28(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(147); }
                  break;
               case 159:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(160); }
                  break;
               case 160:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(160, 161); }
                  break;
               case 163:
                  if (!jjCanMove_29(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(21, 29); }
                  break;
               case 165:
                  if (!jjCanMove_26(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(166); }
                  break;
               case 166:
                  if (!jjCanMove_29(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(166); }
                  break;
               case 168:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     { jjAddStates(46, 47); }
                  break;
               case 171:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(172, 155); }
                  break;
               case 172:
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(172, 155); }
                  break;
               case 174:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     { jjAddStates(48, 49); }
                  break;
               case 177:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 178:
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 180:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     { jjAddStates(50, 51); }
                  break;
               case 182:
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 183:
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 184:
                  if (!jjCanMove_29(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 185 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   164, 166, 184, 170, 172, 155, 183, 176, 178, 159, 160, 182, 158, 159, 160, 139, 
   140, 141, 142, 143, 147, 164, 170, 155, 176, 159, 160, 182, 183, 184, 139, 140, 
   141, 142, 143, 136, 137, 149, 152, 156, 178, 159, 160, 141, 142, 143, 168, 169, 
   174, 175, 180, 181, 177, 179, 171, 173, 165, 167, 156, 157, 158, 152, 153, 154, 
   149, 150, 151, 149, 150, 151, 152, 153, 154, 156, 157, 158, 128, 134, 124, 125, 
   144, 145, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 34:
         return ((jjbitVec12[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 2:
         return ((jjbitVec13[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 34:
         return ((jjbitVec15[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec16[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_14(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 255:
         return ((jjbitVec17[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_15(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec18[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_16(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec20[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_17(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec21[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_18(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec22[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_19(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec23[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_20(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec25[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_21(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec26[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_22(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_23(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec28[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_24(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec29[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_25(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec30[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_26(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec33[i2] & l2) != 0L);
      default :
         if ((jjbitVec31[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_27(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec34[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_28(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec46[i2] & l2) != 0L);
      default :
         if ((jjbitVec35[i1] & l1) != 0L)
            if ((jjbitVec36[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_29(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 247:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec63[i2] & l2) != 0L);
      default :
         if ((jjbitVec47[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\72\72\75", "\174", "\254", null, null, 
null, null, "\u2026", null, null, "\u2208", "\u2286", "\u2282", "\134", "\74", 
"\76", null, null, "\u2225", null, null, "\53", null, "\261", "\u207b", null, null, 
"\u2297", null, "\41", null, null, null, null, null, "\u212f", "\u03af", null, 
"\144\145\147", "\u1d4d", "\u2032", null, null, "\162\141\144", "\47", null, null, null, null, 
"\170", "\171", "\172", null, null, null, null, null, null, null, null, null, null, 
null, "\162\141\156\144\157\155\50\51", null, "\u221a", null, null, null, null, 
"\72", "\51", "\135", "\173", "\175", "\45", "\50", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 185; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xdfffffbfffffffe1L, 0x7f7fcL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[185];
    private final int[] jjstateSet = new int[2 * 185];

    
    protected int curChar;
}
